/*
 * This file is generated by jOOQ.
 */
package com.etrade.puggo.db.tables;


import com.etrade.puggo.db.EtradeGoods;
import com.etrade.puggo.db.Indexes;
import com.etrade.puggo.db.Keys;
import com.etrade.puggo.db.tables.records.GoodsPictureRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 商品图片
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GoodsPicture extends TableImpl<GoodsPictureRecord> {

    private static final long serialVersionUID = -614235926;

    /**
     * The reference instance of <code>etrade_goods.goods_picture</code>
     */
    public static final GoodsPicture GOODS_PICTURE = new GoodsPicture();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GoodsPictureRecord> getRecordType() {
        return GoodsPictureRecord.class;
    }

    /**
     * The column <code>etrade_goods.goods_picture.id</code>.
     */
    public final TableField<GoodsPictureRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>etrade_goods.goods_picture.url</code>. 对象存储地址
     */
    public final TableField<GoodsPictureRecord, String> URL = createField(DSL.name("url"), org.jooq.impl.SQLDataType.VARCHAR(1024).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "对象存储地址");

    /**
     * The column <code>etrade_goods.goods_picture.key</code>. 对象存储key
     */
    public final TableField<GoodsPictureRecord, String> KEY = createField(DSL.name("key"), org.jooq.impl.SQLDataType.VARCHAR(512).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "对象存储key");

    /**
     * The column <code>etrade_goods.goods_picture.version_id</code>. 对象存储版本号
     */
    public final TableField<GoodsPictureRecord, String> VERSION_ID = createField(DSL.name("version_id"), org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "对象存储版本号");

    /**
     * The column <code>etrade_goods.goods_picture.is_main</code>. 是否商品主图：1是
     */
    public final TableField<GoodsPictureRecord, Byte> IS_MAIN = createField(DSL.name("is_main"), org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "是否商品主图：1是");

    /**
     * The column <code>etrade_goods.goods_picture.img_type</code>. 图片类型, 可选值 goods, comment, icon等
     */
    public final TableField<GoodsPictureRecord, String> IMG_TYPE = createField(DSL.name("img_type"), org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "图片类型, 可选值 goods, comment, icon等");

    /**
     * The column <code>etrade_goods.goods_picture.target_id</code>. 目标id, type=goods为商品id, type=comment为评论id 等等
     */
    public final TableField<GoodsPictureRecord, Long> TARGET_ID = createField(DSL.name("target_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINT)), this, "目标id, type=goods为商品id, type=comment为评论id 等等");

    /**
     * The column <code>etrade_goods.goods_picture.deleted</code>. 是否弃用, 1 : 废弃，0 : 正常
     */
    public final TableField<GoodsPictureRecord, Byte> DELETED = createField(DSL.name("deleted"), org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "是否弃用, 1 : 废弃，0 : 正常");

    /**
     * The column <code>etrade_goods.goods_picture.created</code>.
     */
    public final TableField<GoodsPictureRecord, LocalDateTime> CREATED = createField(DSL.name("created"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>etrade_goods.goods_picture.jump_type</code>. 跳转类型
     */
    public final TableField<GoodsPictureRecord, String> JUMP_TYPE = createField(DSL.name("jump_type"), org.jooq.impl.SQLDataType.VARCHAR(25).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "跳转类型");

    /**
     * The column <code>etrade_goods.goods_picture.jump_url</code>. 跳转url
     */
    public final TableField<GoodsPictureRecord, String> JUMP_URL = createField(DSL.name("jump_url"), org.jooq.impl.SQLDataType.VARCHAR(1024).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "跳转url");

    /**
     * Create a <code>etrade_goods.goods_picture</code> table reference
     */
    public GoodsPicture() {
        this(DSL.name("goods_picture"), null);
    }

    /**
     * Create an aliased <code>etrade_goods.goods_picture</code> table reference
     */
    public GoodsPicture(String alias) {
        this(DSL.name(alias), GOODS_PICTURE);
    }

    /**
     * Create an aliased <code>etrade_goods.goods_picture</code> table reference
     */
    public GoodsPicture(Name alias) {
        this(alias, GOODS_PICTURE);
    }

    private GoodsPicture(Name alias, Table<GoodsPictureRecord> aliased) {
        this(alias, aliased, null);
    }

    private GoodsPicture(Name alias, Table<GoodsPictureRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("商品图片"));
    }

    public <O extends Record> GoodsPicture(Table<O> child, ForeignKey<O, GoodsPictureRecord> key) {
        super(child, key, GOODS_PICTURE);
    }

    @Override
    public Schema getSchema() {
        return EtradeGoods.ETRADE_GOODS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.GOODS_PICTURE_IDX_GOODS_PICTURE_TARGET_ID_IMG_TYPE, Indexes.GOODS_PICTURE_PRIMARY);
    }

    @Override
    public Identity<GoodsPictureRecord, Long> getIdentity() {
        return Keys.IDENTITY_GOODS_PICTURE;
    }

    @Override
    public UniqueKey<GoodsPictureRecord> getPrimaryKey() {
        return Keys.KEY_GOODS_PICTURE_PRIMARY;
    }

    @Override
    public List<UniqueKey<GoodsPictureRecord>> getKeys() {
        return Arrays.<UniqueKey<GoodsPictureRecord>>asList(Keys.KEY_GOODS_PICTURE_PRIMARY);
    }

    @Override
    public GoodsPicture as(String alias) {
        return new GoodsPicture(DSL.name(alias), this);
    }

    @Override
    public GoodsPicture as(Name alias) {
        return new GoodsPicture(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public GoodsPicture rename(String name) {
        return new GoodsPicture(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public GoodsPicture rename(Name name) {
        return new GoodsPicture(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Long, String, String, String, Byte, String, Long, Byte, LocalDateTime, String, String> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
