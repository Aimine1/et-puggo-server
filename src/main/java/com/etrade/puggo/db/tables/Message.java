/*
 * This file is generated by jOOQ.
 */
package com.etrade.puggo.db.tables;


import com.etrade.puggo.db.EtradeGoods;
import com.etrade.puggo.db.Indexes;
import com.etrade.puggo.db.Keys;
import com.etrade.puggo.db.tables.records.MessageRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row20;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 用户IM消息记录
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Message extends TableImpl<MessageRecord> {

    private static final long serialVersionUID = 2024829071;

    /**
     * The reference instance of <code>etrade_goods.message</code>
     */
    public static final Message MESSAGE = new Message();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MessageRecord> getRecordType() {
        return MessageRecord.class;
    }

    /**
     * The column <code>etrade_goods.message.id</code>.
     */
    public final TableField<MessageRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>etrade_goods.message.conv_type</code>. 会话具体类型, 默认 PERSON（单聊会话内消息）
     */
    public final TableField<MessageRecord, String> CONV_TYPE = createField(DSL.name("conv_type"), org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "会话具体类型, 默认 PERSON（单聊会话内消息）");

    /**
     * The column <code>etrade_goods.message.to_account</code>. 消息接收者的用户账号或者群id
     */
    public final TableField<MessageRecord, String> TO_ACCOUNT = createField(DSL.name("to_account"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "消息接收者的用户账号或者群id");

    /**
     * The column <code>etrade_goods.message.from_account</code>. 消息发送者的用户账号
     */
    public final TableField<MessageRecord, String> FROM_ACCOUNT = createField(DSL.name("from_account"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "消息发送者的用户账号");

    /**
     * The column <code>etrade_goods.message.from_client_type</code>. 发送客户端类型： AOS、IOS、PC、WINPHONE、WEB、REST
     */
    public final TableField<MessageRecord, String> FROM_CLIENT_TYPE = createField(DSL.name("from_client_type"), org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "发送客户端类型： AOS、IOS、PC、WINPHONE、WEB、REST");

    /**
     * The column <code>etrade_goods.message.from_device_id</code>. 发送设备id
     */
    public final TableField<MessageRecord, String> FROM_DEVICE_ID = createField(DSL.name("from_device_id"), org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "发送设备id");

    /**
     * The column <code>etrade_goods.message.from_nick</code>. 发送方昵称
     */
    public final TableField<MessageRecord, String> FROM_NICK = createField(DSL.name("from_nick"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "发送方昵称");

    /**
     * The column <code>etrade_goods.message.msg_timestamp</code>. 消息发送时间
     */
    public final TableField<MessageRecord, String> MSG_TIMESTAMP = createField(DSL.name("msg_timestamp"), org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "消息发送时间");

    /**
     * The column <code>etrade_goods.message.msg_type</code>. TEXT:文本消息,PICTURE:图片消息,AUDIO:语音消息,VIDEO:视频消息,LOCATION:地理位置消息
     */
    public final TableField<MessageRecord, String> MSG_TYPE = createField(DSL.name("msg_type"), org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "TEXT:文本消息,PICTURE:图片消息,AUDIO:语音消息,VIDEO:视频消息,LOCATION:地理位置消息");

    /**
     * The column <code>etrade_goods.message.body</code>. 消息内容
     */
    public final TableField<MessageRecord, String> BODY = createField(DSL.name("body"), org.jooq.impl.SQLDataType.CLOB, this, "消息内容");

    /**
     * The column <code>etrade_goods.message.attach</code>. 附加消息
     */
    public final TableField<MessageRecord, String> ATTACH = createField(DSL.name("attach"), org.jooq.impl.SQLDataType.CLOB, this, "附加消息");

    /**
     * The column <code>etrade_goods.message.msgid_client</code>. 客户端生成的消息id
     */
    public final TableField<MessageRecord, String> MSGID_CLIENT = createField(DSL.name("msgid_client"), org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "客户端生成的消息id");

    /**
     * The column <code>etrade_goods.message.msgid_server</code>. 服务端生成的消息id
     */
    public final TableField<MessageRecord, String> MSGID_SERVER = createField(DSL.name("msgid_server"), org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "服务端生成的消息id");

    /**
     * The column <code>etrade_goods.message.resend_flag</code>. 重发标记：0不是重发, 1是重发
     */
    public final TableField<MessageRecord, Byte> RESEND_FLAG = createField(DSL.name("resend_flag"), org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "重发标记：0不是重发, 1是重发");

    /**
     * The column <code>etrade_goods.message.custom_safe_flag</code>. 自定义系统通知消息是否存离线:0:不存, 1:存
     */
    public final TableField<MessageRecord, Byte> CUSTOM_SAFE_FLAG = createField(DSL.name("custom_safe_flag"), org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "自定义系统通知消息是否存离线:0:不存, 1:存");

    /**
     * The column <code>etrade_goods.message.custom_apns_text</code>. 自定义系统通知消息推送文本
     */
    public final TableField<MessageRecord, String> CUSTOM_APNS_TEXT = createField(DSL.name("custom_apns_text"), org.jooq.impl.SQLDataType.CLOB, this, "自定义系统通知消息推送文本");

    /**
     * The column <code>etrade_goods.message.ext</code>. 消息拓展字段
     */
    public final TableField<MessageRecord, String> EXT = createField(DSL.name("ext"), org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "消息拓展字段");

    /**
     * The column <code>etrade_goods.message.ip</code>. 消息发送方的客户端IP地址(仅SDK发送的消息才有该字段)
     */
    public final TableField<MessageRecord, String> IP = createField(DSL.name("ip"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "消息发送方的客户端IP地址(仅SDK发送的消息才有该字段)");

    /**
     * The column <code>etrade_goods.message.port</code>. 消息发送方的客户端端口号(仅SDK发送的消息才有该字段)
     */
    public final TableField<MessageRecord, Integer> PORT = createField(DSL.name("port"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "消息发送方的客户端端口号(仅SDK发送的消息才有该字段)");

    /**
     * The column <code>etrade_goods.message.created</code>.
     */
    public final TableField<MessageRecord, LocalDateTime> CREATED = createField(DSL.name("created"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * Create a <code>etrade_goods.message</code> table reference
     */
    public Message() {
        this(DSL.name("message"), null);
    }

    /**
     * Create an aliased <code>etrade_goods.message</code> table reference
     */
    public Message(String alias) {
        this(DSL.name(alias), MESSAGE);
    }

    /**
     * Create an aliased <code>etrade_goods.message</code> table reference
     */
    public Message(Name alias) {
        this(alias, MESSAGE);
    }

    private Message(Name alias, Table<MessageRecord> aliased) {
        this(alias, aliased, null);
    }

    private Message(Name alias, Table<MessageRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("用户IM消息记录"));
    }

    public <O extends Record> Message(Table<O> child, ForeignKey<O, MessageRecord> key) {
        super(child, key, MESSAGE);
    }

    @Override
    public Schema getSchema() {
        return EtradeGoods.ETRADE_GOODS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MESSAGE_IDX_MESSAGE_FROM_ACCOUNT, Indexes.MESSAGE_IDX_MESSAGE_TO_ACCOUNT, Indexes.MESSAGE_PRIMARY);
    }

    @Override
    public Identity<MessageRecord, Long> getIdentity() {
        return Keys.IDENTITY_MESSAGE;
    }

    @Override
    public UniqueKey<MessageRecord> getPrimaryKey() {
        return Keys.KEY_MESSAGE_PRIMARY;
    }

    @Override
    public List<UniqueKey<MessageRecord>> getKeys() {
        return Arrays.<UniqueKey<MessageRecord>>asList(Keys.KEY_MESSAGE_PRIMARY);
    }

    @Override
    public Message as(String alias) {
        return new Message(DSL.name(alias), this);
    }

    @Override
    public Message as(Name alias) {
        return new Message(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Message rename(String name) {
        return new Message(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Message rename(Name name) {
        return new Message(name, null);
    }

    // -------------------------------------------------------------------------
    // Row20 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row20<Long, String, String, String, String, String, String, String, String, String, String, String, String, Byte, Byte, String, String, String, Integer, LocalDateTime> fieldsRow() {
        return (Row20) super.fieldsRow();
    }
}
