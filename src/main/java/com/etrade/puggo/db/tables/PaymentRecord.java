/*
 * This file is generated by jOOQ.
 */
package com.etrade.puggo.db.tables;


import com.etrade.puggo.db.EtradeGoods;
import com.etrade.puggo.db.Indexes;
import com.etrade.puggo.db.tables.records.PaymentRecordRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 支付记录
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PaymentRecord extends TableImpl<PaymentRecordRecord> {

    private static final long serialVersionUID = 2052993927;

    /**
     * The reference instance of <code>etrade_goods.payment_record</code>
     */
    public static final PaymentRecord PAYMENT_RECORD = new PaymentRecord();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PaymentRecordRecord> getRecordType() {
        return PaymentRecordRecord.class;
    }

    /**
     * The column <code>etrade_goods.payment_record.id</code>. 主键id
     */
    public final TableField<PaymentRecordRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINT)), this, "主键id");

    /**
     * The column <code>etrade_goods.payment_record.transaction_no</code>. 交易单号
     */
    public final TableField<PaymentRecordRecord, String> TRANSACTION_NO = createField(DSL.name("transaction_no"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "交易单号");

    /**
     * The column <code>etrade_goods.payment_record.user_id</code>. 系统用户id
     */
    public final TableField<PaymentRecordRecord, Long> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINT)), this, "系统用户id");

    /**
     * The column <code>etrade_goods.payment_record.delivery_address_id</code>. 用户收货地址id
     */
    public final TableField<PaymentRecordRecord, Integer> DELIVERY_ADDRESS_ID = createField(DSL.name("delivery_address_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "用户收货地址id");

    /**
     * The column <code>etrade_goods.payment_record.billing_address_id</code>. 用户账单地址id，仅当支付方式为信用卡时有效
     */
    public final TableField<PaymentRecordRecord, Integer> BILLING_ADDRESS_ID = createField(DSL.name("billing_address_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "用户账单地址id，仅当支付方式为信用卡时有效");

    /**
     * The column <code>etrade_goods.payment_record.is_same_as_delivery_address</code>. 是否使用收货地址作为账单地址，如果是则billing_address_id不生效
     */
    public final TableField<PaymentRecordRecord, Byte> IS_SAME_AS_DELIVERY_ADDRESS = createField(DSL.name("is_same_as_delivery_address"), org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "是否使用收货地址作为账单地址，如果是则billing_address_id不生效");

    /**
     * The column <code>etrade_goods.payment_record.shipping_method</code>. 交易方式：Public Meetup、Standard Shipping、Same-day Delivery..
     */
    public final TableField<PaymentRecordRecord, String> SHIPPING_METHOD = createField(DSL.name("shipping_method"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "交易方式：Public Meetup、Standard Shipping、Same-day Delivery..");

    /**
     * The column <code>etrade_goods.payment_record.payment_type</code>. 支付类型，比如：card、alipay、wechat、google_pay、apple_pay
     */
    public final TableField<PaymentRecordRecord, String> PAYMENT_TYPE = createField(DSL.name("payment_type"), org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "支付类型，比如：card、alipay、wechat、google_pay、apple_pay");

    /**
     * The column <code>etrade_goods.payment_record.payment_method_id</code>.
     */
    public final TableField<PaymentRecordRecord, String> PAYMENT_METHOD_ID = createField(DSL.name("payment_method_id"), org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false).defaultValue(org.jooq.impl.DSL.inline("支付方式id，由前端生成", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>etrade_goods.payment_record.token</code>.
     */
    public final TableField<PaymentRecordRecord, String> TOKEN = createField(DSL.name("token"), org.jooq.impl.SQLDataType.VARCHAR(1024).nullable(false).defaultValue(org.jooq.impl.DSL.inline("支付token，由前端生成", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>etrade_goods.payment_record.created</code>.
     */
    public final TableField<PaymentRecordRecord, LocalDateTime> CREATED = createField(DSL.name("created"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>etrade_goods.payment_record.modified</code>.
     */
    public final TableField<PaymentRecordRecord, LocalDateTime> MODIFIED = createField(DSL.name("modified"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * Create a <code>etrade_goods.payment_record</code> table reference
     */
    public PaymentRecord() {
        this(DSL.name("payment_record"), null);
    }

    /**
     * Create an aliased <code>etrade_goods.payment_record</code> table reference
     */
    public PaymentRecord(String alias) {
        this(DSL.name(alias), PAYMENT_RECORD);
    }

    /**
     * Create an aliased <code>etrade_goods.payment_record</code> table reference
     */
    public PaymentRecord(Name alias) {
        this(alias, PAYMENT_RECORD);
    }

    private PaymentRecord(Name alias, Table<PaymentRecordRecord> aliased) {
        this(alias, aliased, null);
    }

    private PaymentRecord(Name alias, Table<PaymentRecordRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("支付记录"));
    }

    public <O extends Record> PaymentRecord(Table<O> child, ForeignKey<O, PaymentRecordRecord> key) {
        super(child, key, PAYMENT_RECORD);
    }

    @Override
    public Schema getSchema() {
        return EtradeGoods.ETRADE_GOODS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PAYMENT_RECORD_IDX_TRANSACTION_NO, Indexes.PAYMENT_RECORD_IDX_USER_ID);
    }

    @Override
    public PaymentRecord as(String alias) {
        return new PaymentRecord(DSL.name(alias), this);
    }

    @Override
    public PaymentRecord as(Name alias) {
        return new PaymentRecord(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PaymentRecord rename(String name) {
        return new PaymentRecord(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PaymentRecord rename(Name name) {
        return new PaymentRecord(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<Long, String, Long, Integer, Integer, Byte, String, String, String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
