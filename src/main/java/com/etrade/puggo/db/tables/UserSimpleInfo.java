/*
 * This file is generated by jOOQ.
 */
package com.etrade.puggo.db.tables;


import com.etrade.puggo.db.EtradeGoods;
import com.etrade.puggo.db.Indexes;
import com.etrade.puggo.db.Keys;
import com.etrade.puggo.db.tables.records.UserSimpleInfoRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 个人简短信息
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserSimpleInfo extends TableImpl<UserSimpleInfoRecord> {

    private static final long serialVersionUID = -1853623289;

    /**
     * The reference instance of <code>etrade_goods.user_simple_info</code>
     */
    public static final UserSimpleInfo USER_SIMPLE_INFO = new UserSimpleInfo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserSimpleInfoRecord> getRecordType() {
        return UserSimpleInfoRecord.class;
    }

    /**
     * The column <code>etrade_goods.user_simple_info.id</code>.
     */
    public final TableField<UserSimpleInfoRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>etrade_goods.user_simple_info.user_id</code>. 用户id
     */
    public final TableField<UserSimpleInfoRecord, Long> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINT)), this, "用户id");

    /**
     * The column <code>etrade_goods.user_simple_info.nickname</code>. 用户昵称
     */
    public final TableField<UserSimpleInfoRecord, String> NICKNAME = createField(DSL.name("nickname"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "用户昵称");

    /**
     * The column <code>etrade_goods.user_simple_info.avatar</code>. 用户头像
     */
    public final TableField<UserSimpleInfoRecord, String> AVATAR = createField(DSL.name("avatar"), org.jooq.impl.SQLDataType.VARCHAR(1024).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "用户头像");

    /**
     * Create a <code>etrade_goods.user_simple_info</code> table reference
     */
    public UserSimpleInfo() {
        this(DSL.name("user_simple_info"), null);
    }

    /**
     * Create an aliased <code>etrade_goods.user_simple_info</code> table reference
     */
    public UserSimpleInfo(String alias) {
        this(DSL.name(alias), USER_SIMPLE_INFO);
    }

    /**
     * Create an aliased <code>etrade_goods.user_simple_info</code> table reference
     */
    public UserSimpleInfo(Name alias) {
        this(alias, USER_SIMPLE_INFO);
    }

    private UserSimpleInfo(Name alias, Table<UserSimpleInfoRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserSimpleInfo(Name alias, Table<UserSimpleInfoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("个人简短信息"));
    }

    public <O extends Record> UserSimpleInfo(Table<O> child, ForeignKey<O, UserSimpleInfoRecord> key) {
        super(child, key, USER_SIMPLE_INFO);
    }

    @Override
    public Schema getSchema() {
        return EtradeGoods.ETRADE_GOODS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.USER_SIMPLE_INFO_PRIMARY);
    }

    @Override
    public Identity<UserSimpleInfoRecord, Long> getIdentity() {
        return Keys.IDENTITY_USER_SIMPLE_INFO;
    }

    @Override
    public UniqueKey<UserSimpleInfoRecord> getPrimaryKey() {
        return Keys.KEY_USER_SIMPLE_INFO_PRIMARY;
    }

    @Override
    public List<UniqueKey<UserSimpleInfoRecord>> getKeys() {
        return Arrays.<UniqueKey<UserSimpleInfoRecord>>asList(Keys.KEY_USER_SIMPLE_INFO_PRIMARY);
    }

    @Override
    public UserSimpleInfo as(String alias) {
        return new UserSimpleInfo(DSL.name(alias), this);
    }

    @Override
    public UserSimpleInfo as(Name alias) {
        return new UserSimpleInfo(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserSimpleInfo rename(String name) {
        return new UserSimpleInfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserSimpleInfo rename(Name name) {
        return new UserSimpleInfo(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, Long, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
