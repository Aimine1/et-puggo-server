/*
 * This file is generated by jOOQ.
 */
package com.etrade.puggo.db.tables;


import com.etrade.puggo.db.EtradeGoods;
import com.etrade.puggo.db.Indexes;
import com.etrade.puggo.db.Keys;
import com.etrade.puggo.db.tables.records.PaymentCardRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 买家信用卡/借记卡信息
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PaymentCard extends TableImpl<PaymentCardRecord> {

    private static final long serialVersionUID = -510516287;

    /**
     * The reference instance of <code>etrade_goods.payment_card</code>
     */
    public static final PaymentCard PAYMENT_CARD = new PaymentCard();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PaymentCardRecord> getRecordType() {
        return PaymentCardRecord.class;
    }

    /**
     * The column <code>etrade_goods.payment_card.id</code>.
     */
    public final TableField<PaymentCardRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>etrade_goods.payment_card.user_id</code>. 系统用户id
     */
    public final TableField<PaymentCardRecord, Long> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINT)), this, "系统用户id");

    /**
     * The column <code>etrade_goods.payment_card.card_number</code>. 卡号
     */
    public final TableField<PaymentCardRecord, String> CARD_NUMBER = createField(DSL.name("card_number"), org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "卡号");

    /**
     * The column <code>etrade_goods.payment_card.expire_year</code>. 到期年份，格式:MM，比如：26
     */
    public final TableField<PaymentCardRecord, String> EXPIRE_YEAR = createField(DSL.name("expire_year"), org.jooq.impl.SQLDataType.VARCHAR(2).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "到期年份，格式:MM，比如：26");

    /**
     * The column <code>etrade_goods.payment_card.expire_month</code>. 到期月份，格式:YY，比如：01
     */
    public final TableField<PaymentCardRecord, String> EXPIRE_MONTH = createField(DSL.name("expire_month"), org.jooq.impl.SQLDataType.VARCHAR(2).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "到期月份，格式:YY，比如：01");

    /**
     * The column <code>etrade_goods.payment_card.cvs</code>. 信用卡验证码
     */
    public final TableField<PaymentCardRecord, String> CVS = createField(DSL.name("cvs"), org.jooq.impl.SQLDataType.VARCHAR(5).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "信用卡验证码");

    /**
     * The column <code>etrade_goods.payment_card.title</code>. 信用卡标记
     */
    public final TableField<PaymentCardRecord, String> TITLE = createField(DSL.name("title"), org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "信用卡标记");

    /**
     * The column <code>etrade_goods.payment_card.is_default</code>. 是否是默认卡
     */
    public final TableField<PaymentCardRecord, Byte> IS_DEFAULT = createField(DSL.name("is_default"), org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "是否是默认卡");

    /**
     * The column <code>etrade_goods.payment_card.brand</code>. 信用卡品牌，比如：Visa、MasterCard、American Express (Amex)、Discover等
     */
    public final TableField<PaymentCardRecord, String> BRAND = createField(DSL.name("brand"), org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "信用卡品牌，比如：Visa、MasterCard、American Express (Amex)、Discover等");

    /**
     * The column <code>etrade_goods.payment_card.type</code>. 卡类型：credit/debit
     */
    public final TableField<PaymentCardRecord, String> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "卡类型：credit/debit");

    /**
     * The column <code>etrade_goods.payment_card.created</code>.
     */
    public final TableField<PaymentCardRecord, LocalDateTime> CREATED = createField(DSL.name("created"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>etrade_goods.payment_card.modified</code>.
     */
    public final TableField<PaymentCardRecord, LocalDateTime> MODIFIED = createField(DSL.name("modified"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * Create a <code>etrade_goods.payment_card</code> table reference
     */
    public PaymentCard() {
        this(DSL.name("payment_card"), null);
    }

    /**
     * Create an aliased <code>etrade_goods.payment_card</code> table reference
     */
    public PaymentCard(String alias) {
        this(DSL.name(alias), PAYMENT_CARD);
    }

    /**
     * Create an aliased <code>etrade_goods.payment_card</code> table reference
     */
    public PaymentCard(Name alias) {
        this(alias, PAYMENT_CARD);
    }

    private PaymentCard(Name alias, Table<PaymentCardRecord> aliased) {
        this(alias, aliased, null);
    }

    private PaymentCard(Name alias, Table<PaymentCardRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("买家信用卡/借记卡信息"));
    }

    public <O extends Record> PaymentCard(Table<O> child, ForeignKey<O, PaymentCardRecord> key) {
        super(child, key, PAYMENT_CARD);
    }

    @Override
    public Schema getSchema() {
        return EtradeGoods.ETRADE_GOODS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PAYMENT_CARD_IDX_USER_ID, Indexes.PAYMENT_CARD_PRIMARY);
    }

    @Override
    public Identity<PaymentCardRecord, Integer> getIdentity() {
        return Keys.IDENTITY_PAYMENT_CARD;
    }

    @Override
    public UniqueKey<PaymentCardRecord> getPrimaryKey() {
        return Keys.KEY_PAYMENT_CARD_PRIMARY;
    }

    @Override
    public List<UniqueKey<PaymentCardRecord>> getKeys() {
        return Arrays.<UniqueKey<PaymentCardRecord>>asList(Keys.KEY_PAYMENT_CARD_PRIMARY);
    }

    @Override
    public PaymentCard as(String alias) {
        return new PaymentCard(DSL.name(alias), this);
    }

    @Override
    public PaymentCard as(Name alias) {
        return new PaymentCard(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PaymentCard rename(String name) {
        return new PaymentCard(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PaymentCard rename(Name name) {
        return new PaymentCard(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<Integer, Long, String, String, String, String, String, Byte, String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
