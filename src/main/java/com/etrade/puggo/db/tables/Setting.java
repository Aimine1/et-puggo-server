/*
 * This file is generated by jOOQ.
 */
package com.etrade.puggo.db.tables;


import com.etrade.puggo.db.EtradeGoods;
import com.etrade.puggo.db.Indexes;
import com.etrade.puggo.db.Keys;
import com.etrade.puggo.db.tables.records.SettingRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 设置
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Setting extends TableImpl<SettingRecord> {

    private static final long serialVersionUID = 370397940;

    /**
     * The reference instance of <code>etrade_goods.setting</code>
     */
    public static final Setting SETTING = new Setting();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SettingRecord> getRecordType() {
        return SettingRecord.class;
    }

    /**
     * The column <code>etrade_goods.setting.id</code>.
     */
    public final TableField<SettingRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>etrade_goods.setting.key</code>. key
     */
    public final TableField<SettingRecord, String> KEY = createField(DSL.name("key"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "key");

    /**
     * The column <code>etrade_goods.setting.value</code>. value
     */
    public final TableField<SettingRecord, String> VALUE = createField(DSL.name("value"), org.jooq.impl.SQLDataType.VARCHAR(256).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "value");

    /**
     * The column <code>etrade_goods.setting.comment</code>. comment
     */
    public final TableField<SettingRecord, String> COMMENT = createField(DSL.name("comment"), org.jooq.impl.SQLDataType.VARCHAR(256).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "comment");

    /**
     * The column <code>etrade_goods.setting.created</code>.
     */
    public final TableField<SettingRecord, LocalDateTime> CREATED = createField(DSL.name("created"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>etrade_goods.setting.modified</code>.
     */
    public final TableField<SettingRecord, LocalDateTime> MODIFIED = createField(DSL.name("modified"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * Create a <code>etrade_goods.setting</code> table reference
     */
    public Setting() {
        this(DSL.name("setting"), null);
    }

    /**
     * Create an aliased <code>etrade_goods.setting</code> table reference
     */
    public Setting(String alias) {
        this(DSL.name(alias), SETTING);
    }

    /**
     * Create an aliased <code>etrade_goods.setting</code> table reference
     */
    public Setting(Name alias) {
        this(alias, SETTING);
    }

    private Setting(Name alias, Table<SettingRecord> aliased) {
        this(alias, aliased, null);
    }

    private Setting(Name alias, Table<SettingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("设置"));
    }

    public <O extends Record> Setting(Table<O> child, ForeignKey<O, SettingRecord> key) {
        super(child, key, SETTING);
    }

    @Override
    public Schema getSchema() {
        return EtradeGoods.ETRADE_GOODS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SETTING_PRIMARY, Indexes.SETTING_UK_SETTING_KEY);
    }

    @Override
    public Identity<SettingRecord, Long> getIdentity() {
        return Keys.IDENTITY_SETTING;
    }

    @Override
    public UniqueKey<SettingRecord> getPrimaryKey() {
        return Keys.KEY_SETTING_PRIMARY;
    }

    @Override
    public List<UniqueKey<SettingRecord>> getKeys() {
        return Arrays.<UniqueKey<SettingRecord>>asList(Keys.KEY_SETTING_PRIMARY, Keys.KEY_SETTING_UK_SETTING_KEY);
    }

    @Override
    public Setting as(String alias) {
        return new Setting(DSL.name(alias), this);
    }

    @Override
    public Setting as(Name alias) {
        return new Setting(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Setting rename(String name) {
        return new Setting(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Setting rename(Name name) {
        return new Setting(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, String, String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
