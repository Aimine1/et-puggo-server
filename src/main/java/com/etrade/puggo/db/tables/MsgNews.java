/*
 * This file is generated by jOOQ.
 */
package com.etrade.puggo.db.tables;


import com.etrade.puggo.db.EtradeGoods;
import com.etrade.puggo.db.Indexes;
import com.etrade.puggo.db.Keys;
import com.etrade.puggo.db.tables.records.MsgNewsRecord;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import javax.annotation.processing.Generated;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row17;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 用户通知消息
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MsgNews extends TableImpl<MsgNewsRecord> {

    private static final long serialVersionUID = -436967183;

    /**
     * The reference instance of <code>etrade_goods.msg_news</code>
     */
    public static final MsgNews MSG_NEWS = new MsgNews();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MsgNewsRecord> getRecordType() {
        return MsgNewsRecord.class;
    }

    /**
     * The column <code>etrade_goods.msg_news.id</code>.
     */
    public final TableField<MsgNewsRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>etrade_goods.msg_news.attach</code>. 自定义系统通知的具体内容
     */
    public final TableField<MsgNewsRecord, String> ATTACH = createField(DSL.name("attach"), org.jooq.impl.SQLDataType.VARCHAR(1024).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "自定义系统通知的具体内容");

    /**
     * The column <code>etrade_goods.msg_news.pushcontent</code>. 推送文案
     */
    public final TableField<MsgNewsRecord, String> PUSHCONTENT = createField(DSL.name("pushcontent"), org.jooq.impl.SQLDataType.VARCHAR(1024).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "推送文案");

    /**
     * The column <code>etrade_goods.msg_news.payload</code>. 推送 payload 配置, 手机厂商相关配置
     */
    public final TableField<MsgNewsRecord, String> PAYLOAD = createField(DSL.name("payload"), org.jooq.impl.SQLDataType.VARCHAR(1024).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "推送 payload 配置, 手机厂商相关配置");

    /**
     * The column <code>etrade_goods.msg_news.from_user_id</code>. 消息发送者的用户id, 默认系统=-1
     */
    public final TableField<MsgNewsRecord, Long> FROM_USER_ID = createField(DSL.name("from_user_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINT)), this, "消息发送者的用户id, 默认系统=-1");

    /**
     * The column <code>etrade_goods.msg_news.from_account</code>. 消息发送者的用户账号, 默认系统消息
     */
    public final TableField<MsgNewsRecord, String> FROM_ACCOUNT = createField(DSL.name("from_account"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "消息发送者的用户账号, 默认系统消息");

    /**
     * The column <code>etrade_goods.msg_news.to_account</code>. 消息接收者的用户账号或者群id
     */
    public final TableField<MsgNewsRecord, String> TO_ACCOUNT = createField(DSL.name("to_account"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "消息接收者的用户账号或者群id");

    /**
     * The column <code>etrade_goods.msg_news.to_user_id</code>. 消息接收者的用户id
     */
    public final TableField<MsgNewsRecord, Long> TO_USER_ID = createField(DSL.name("to_user_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINT)), this, "消息接收者的用户id");

    /**
     * The column <code>etrade_goods.msg_news.state</code>. 状态: 1待推送 2推送中 3已推送 4推送失败
     */
    public final TableField<MsgNewsRecord, Byte> STATE = createField(DSL.name("state"), org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "状态: 1待推送 2推送中 3已推送 4推送失败");

    /**
     * The column <code>etrade_goods.msg_news.push_time</code>. 推送时间
     */
    public final TableField<MsgNewsRecord, LocalDateTime> PUSH_TIME = createField(DSL.name("push_time"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "推送时间");

    /**
     * The column <code>etrade_goods.msg_news.fail_reason</code>. 推送失败原因
     */
    public final TableField<MsgNewsRecord, String> FAIL_REASON = createField(DSL.name("fail_reason"), org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "推送失败原因");

    /**
     * The column <code>etrade_goods.msg_news.goods_id</code>. 商品id
     */
    public final TableField<MsgNewsRecord, Long> GOODS_ID = createField(DSL.name("goods_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINT)), this, "商品id");

    /**
     * The column <code>etrade_goods.msg_news.goods_main_pic</code>. 商品主图
     */
    public final TableField<MsgNewsRecord, String> GOODS_MAIN_PIC = createField(DSL.name("goods_main_pic"), org.jooq.impl.SQLDataType.VARCHAR(1024).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "商品主图");

    /**
     * The column <code>etrade_goods.msg_news.is_unread</code>. 1=消息未读，0=消息已读
     */
    public final TableField<MsgNewsRecord, Byte> IS_UNREAD = createField(DSL.name("is_unread"), org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.TINYINT)), this, "1=消息未读，0=消息已读");

    /**
     * The column <code>etrade_goods.msg_news.retry_times</code>. 失败重试次数
     */
    public final TableField<MsgNewsRecord, Integer> RETRY_TIMES = createField(DSL.name("retry_times"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "失败重试次数");

    /**
     * The column <code>etrade_goods.msg_news.created</code>.
     */
    public final TableField<MsgNewsRecord, LocalDateTime> CREATED = createField(DSL.name("created"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>etrade_goods.msg_news.modified</code>.
     */
    public final TableField<MsgNewsRecord, LocalDateTime> MODIFIED = createField(DSL.name("modified"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * Create a <code>etrade_goods.msg_news</code> table reference
     */
    public MsgNews() {
        this(DSL.name("msg_news"), null);
    }

    /**
     * Create an aliased <code>etrade_goods.msg_news</code> table reference
     */
    public MsgNews(String alias) {
        this(DSL.name(alias), MSG_NEWS);
    }

    /**
     * Create an aliased <code>etrade_goods.msg_news</code> table reference
     */
    public MsgNews(Name alias) {
        this(alias, MSG_NEWS);
    }

    private MsgNews(Name alias, Table<MsgNewsRecord> aliased) {
        this(alias, aliased, null);
    }

    private MsgNews(Name alias, Table<MsgNewsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("用户通知消息"));
    }

    public <O extends Record> MsgNews(Table<O> child, ForeignKey<O, MsgNewsRecord> key) {
        super(child, key, MSG_NEWS);
    }

    @Override
    public Schema getSchema() {
        return EtradeGoods.ETRADE_GOODS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MSG_NEWS_IDX_MSG_NEWS_TO_USER_ID, Indexes.MSG_NEWS_PRIMARY);
    }

    @Override
    public Identity<MsgNewsRecord, Long> getIdentity() {
        return Keys.IDENTITY_MSG_NEWS;
    }

    @Override
    public UniqueKey<MsgNewsRecord> getPrimaryKey() {
        return Keys.KEY_MSG_NEWS_PRIMARY;
    }

    @Override
    public List<UniqueKey<MsgNewsRecord>> getKeys() {
        return Arrays.<UniqueKey<MsgNewsRecord>>asList(Keys.KEY_MSG_NEWS_PRIMARY);
    }

    @Override
    public MsgNews as(String alias) {
        return new MsgNews(DSL.name(alias), this);
    }

    @Override
    public MsgNews as(Name alias) {
        return new MsgNews(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MsgNews rename(String name) {
        return new MsgNews(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MsgNews rename(Name name) {
        return new MsgNews(name, null);
    }

    // -------------------------------------------------------------------------
    // Row17 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row17<Long, String, String, String, Long, String, String, Long, Byte, LocalDateTime, String, Long, String, Byte, Integer, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row17) super.fieldsRow();
    }
}
