/*
 * This file is generated by jOOQ.
 */
package com.etrade.puggo.db.tables;


import com.etrade.puggo.db.EtradeGoods;
import com.etrade.puggo.db.Indexes;
import com.etrade.puggo.db.Keys;
import com.etrade.puggo.db.tables.records.UserAddressRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 收货地址
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserAddress extends TableImpl<UserAddressRecord> {

    private static final long serialVersionUID = 864302190;

    /**
     * The reference instance of <code>etrade_goods.user_address</code>
     */
    public static final UserAddress USER_ADDRESS = new UserAddress();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserAddressRecord> getRecordType() {
        return UserAddressRecord.class;
    }

    /**
     * The column <code>etrade_goods.user_address.id</code>.
     */
    public final TableField<UserAddressRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>etrade_goods.user_address.user_id</code>. 用户id
     */
    public final TableField<UserAddressRecord, Long> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINT)), this, "用户id");

    /**
     * The column <code>etrade_goods.user_address.contact</code>. 联系人
     */
    public final TableField<UserAddressRecord, String> CONTACT = createField(DSL.name("contact"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "联系人");

    /**
     * The column <code>etrade_goods.user_address.contact_number</code>. 联系电话
     */
    public final TableField<UserAddressRecord, String> CONTACT_NUMBER = createField(DSL.name("contact_number"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "联系电话");

    /**
     * The column <code>etrade_goods.user_address.country</code>. 国家
     */
    public final TableField<UserAddressRecord, String> COUNTRY = createField(DSL.name("country"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "国家");

    /**
     * The column <code>etrade_goods.user_address.province</code>. 省份/州
     */
    public final TableField<UserAddressRecord, String> PROVINCE = createField(DSL.name("province"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "省份/州");

    /**
     * The column <code>etrade_goods.user_address.city</code>. 城市
     */
    public final TableField<UserAddressRecord, String> CITY = createField(DSL.name("city"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "城市");

    /**
     * The column <code>etrade_goods.user_address.district</code>. 区域
     */
    public final TableField<UserAddressRecord, String> DISTRICT = createField(DSL.name("district"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "区域");

    /**
     * The column <code>etrade_goods.user_address.address</code>. 详细地址
     */
    public final TableField<UserAddressRecord, String> ADDRESS = createField(DSL.name("address"), org.jooq.impl.SQLDataType.VARCHAR(1024).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "详细地址");

    /**
     * The column <code>etrade_goods.user_address.is_default</code>. 是否默认, 1 : 是，0 : 否
     */
    public final TableField<UserAddressRecord, Byte> IS_DEFAULT = createField(DSL.name("is_default"), org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "是否默认, 1 : 是，0 : 否");

    /**
     * The column <code>etrade_goods.user_address.created</code>.
     */
    public final TableField<UserAddressRecord, LocalDateTime> CREATED = createField(DSL.name("created"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>etrade_goods.user_address.modified</code>.
     */
    public final TableField<UserAddressRecord, LocalDateTime> MODIFIED = createField(DSL.name("modified"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * Create a <code>etrade_goods.user_address</code> table reference
     */
    public UserAddress() {
        this(DSL.name("user_address"), null);
    }

    /**
     * Create an aliased <code>etrade_goods.user_address</code> table reference
     */
    public UserAddress(String alias) {
        this(DSL.name(alias), USER_ADDRESS);
    }

    /**
     * Create an aliased <code>etrade_goods.user_address</code> table reference
     */
    public UserAddress(Name alias) {
        this(alias, USER_ADDRESS);
    }

    private UserAddress(Name alias, Table<UserAddressRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserAddress(Name alias, Table<UserAddressRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("收货地址"));
    }

    public <O extends Record> UserAddress(Table<O> child, ForeignKey<O, UserAddressRecord> key) {
        super(child, key, USER_ADDRESS);
    }

    @Override
    public Schema getSchema() {
        return EtradeGoods.ETRADE_GOODS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.USER_ADDRESS_PRIMARY);
    }

    @Override
    public Identity<UserAddressRecord, Long> getIdentity() {
        return Keys.IDENTITY_USER_ADDRESS;
    }

    @Override
    public UniqueKey<UserAddressRecord> getPrimaryKey() {
        return Keys.KEY_USER_ADDRESS_PRIMARY;
    }

    @Override
    public List<UniqueKey<UserAddressRecord>> getKeys() {
        return Arrays.<UniqueKey<UserAddressRecord>>asList(Keys.KEY_USER_ADDRESS_PRIMARY);
    }

    @Override
    public UserAddress as(String alias) {
        return new UserAddress(DSL.name(alias), this);
    }

    @Override
    public UserAddress as(Name alias) {
        return new UserAddress(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserAddress rename(String name) {
        return new UserAddress(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserAddress rename(Name name) {
        return new UserAddress(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<Long, Long, String, String, String, String, String, String, String, Byte, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
