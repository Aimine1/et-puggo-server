/*
 * This file is generated by jOOQ.
 */
package com.etrade.puggo.db.tables;


import com.etrade.puggo.db.EtradeGoods;
import com.etrade.puggo.db.Indexes;
import com.etrade.puggo.db.Keys;
import com.etrade.puggo.db.tables.records.UserProfileRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 用户个人偏好设置
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserProfile extends TableImpl<UserProfileRecord> {

    private static final long serialVersionUID = -1562408653;

    /**
     * The reference instance of <code>etrade_goods.user_profile</code>
     */
    public static final UserProfile USER_PROFILE = new UserProfile();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserProfileRecord> getRecordType() {
        return UserProfileRecord.class;
    }

    /**
     * The column <code>etrade_goods.user_profile.id</code>.
     */
    public final TableField<UserProfileRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>etrade_goods.user_profile.user_id</code>. 用户id
     */
    public final TableField<UserProfileRecord, Long> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINT)), this, "用户id");

    /**
     * The column <code>etrade_goods.user_profile.key</code>. key
     */
    public final TableField<UserProfileRecord, String> KEY = createField(DSL.name("key"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "key");

    /**
     * The column <code>etrade_goods.user_profile.value</code>. value
     */
    public final TableField<UserProfileRecord, String> VALUE = createField(DSL.name("value"), org.jooq.impl.SQLDataType.VARCHAR(256).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "value");

    /**
     * The column <code>etrade_goods.user_profile.comment</code>. comment
     */
    public final TableField<UserProfileRecord, String> COMMENT = createField(DSL.name("comment"), org.jooq.impl.SQLDataType.VARCHAR(256).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "comment");

    /**
     * The column <code>etrade_goods.user_profile.created</code>.
     */
    public final TableField<UserProfileRecord, LocalDateTime> CREATED = createField(DSL.name("created"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>etrade_goods.user_profile.modified</code>.
     */
    public final TableField<UserProfileRecord, LocalDateTime> MODIFIED = createField(DSL.name("modified"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * Create a <code>etrade_goods.user_profile</code> table reference
     */
    public UserProfile() {
        this(DSL.name("user_profile"), null);
    }

    /**
     * Create an aliased <code>etrade_goods.user_profile</code> table reference
     */
    public UserProfile(String alias) {
        this(DSL.name(alias), USER_PROFILE);
    }

    /**
     * Create an aliased <code>etrade_goods.user_profile</code> table reference
     */
    public UserProfile(Name alias) {
        this(alias, USER_PROFILE);
    }

    private UserProfile(Name alias, Table<UserProfileRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserProfile(Name alias, Table<UserProfileRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("用户个人偏好设置"));
    }

    public <O extends Record> UserProfile(Table<O> child, ForeignKey<O, UserProfileRecord> key) {
        super(child, key, USER_PROFILE);
    }

    @Override
    public Schema getSchema() {
        return EtradeGoods.ETRADE_GOODS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.USER_PROFILE_PRIMARY, Indexes.USER_PROFILE_UK_USERID_KEY);
    }

    @Override
    public Identity<UserProfileRecord, Long> getIdentity() {
        return Keys.IDENTITY_USER_PROFILE;
    }

    @Override
    public UniqueKey<UserProfileRecord> getPrimaryKey() {
        return Keys.KEY_USER_PROFILE_PRIMARY;
    }

    @Override
    public List<UniqueKey<UserProfileRecord>> getKeys() {
        return Arrays.<UniqueKey<UserProfileRecord>>asList(Keys.KEY_USER_PROFILE_PRIMARY, Keys.KEY_USER_PROFILE_UK_USERID_KEY);
    }

    @Override
    public UserProfile as(String alias) {
        return new UserProfile(DSL.name(alias), this);
    }

    @Override
    public UserProfile as(Name alias) {
        return new UserProfile(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserProfile rename(String name) {
        return new UserProfile(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserProfile rename(Name name) {
        return new UserProfile(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, Long, String, String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
